generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id         Int      @id @default(autoincrement())
  login      String   @unique
  password   String
  nom        String
  prenom     String
  numero     String
  etatCompte String   @default("actif")
  email      String   @unique
  idRole     Int
  Role       Role     @relation(fields: [idRole], references: [id])
  Contacts   Contact[]
  Interventions Intervention[] @relation("TechnicienIntervention")
  Maintenances Maintenance[]   @relation("TechnicienMaintenance")
  Sessions   Session[]
  
}

model Role {
  id            Int          @id @default(autoincrement())
  nom           String
  Utilisateurs  Utilisateur[]
}


model Session {
  id            Int      @id @default(autoincrement())
  userId        Int
  token         String
  expires       DateTime
  Utilisateur   Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id            Int      @id @default(autoincrement())
  email         String
  token         String
  expires       DateTime
  createdAt     DateTime @default(now())
}

model Client {
  id        Int      @id @default(autoincrement())
  nom       String
  secteurDactivite String
  Sites     Site[]
  Contacts  Contact[]
  Installations Installation[]
  DemandesIntervention DemandeIntervention[]
}

model Site {
  id        Int      @id @default(autoincrement())
  nom       String
  idClient  Int
  adresse   String
  Client    Client    @relation(fields: [idClient], references: [id], onDelete: Cascade)
  Contacts  ContactSite[]
  Maintenances Maintenance[]
  Installations Installation[]
  DemandesIntervention DemandeIntervention[]
  Contrats  Contrat[]
}

model Contact {
  id           Int         @id @default(autoincrement())
  idClient     Int
  idUtilisateur Int
  Client       Client      @relation(fields: [idClient], references: [id], onDelete: Cascade)
  Utilisateur  Utilisateur @relation(fields: [idUtilisateur], references: [id], onDelete: Cascade)
  ContactSites ContactSite[]
  DemandesIntervention DemandeIntervention[]
  Interventions Intervention[]
  Maintenances Maintenance[]
}

model ContactSite {
  id        Int      @id @default(autoincrement())
  estManager Boolean
  idSite    Int
  idContact Int
  Site      Site      @relation(fields: [idSite], references: [id], onDelete: Cascade)
  Contact   Contact   @relation(fields: [idContact], references: [id], onDelete: Cascade)
}

model Systeme {
  id           Int      @id @default(autoincrement())
  nom          String
  Equipements  Equipement[]
  Actions      ActionMaintenance[]
  Installations Installation[]
}

model Equipement {
  id           Int      @id @default(autoincrement())
  nom          String
  idMarqueSsi  Int
  idModeleSsi  Int
  idSysteme    Int
  MarqueSsi    MarqueSsi @relation(fields: [idMarqueSsi], references: [id])
  ModeleSsi    ModeleSsi @relation(fields: [idModeleSsi], references: [id])
  Systeme      Systeme   @relation(fields: [idSysteme], references: [id])
  InstallationsEquipement InstallationEquipement[]
}

model MarqueSsi {
  id         Int         @id @default(autoincrement())
  nom        String
  Equipements Equipement[]
}

model ModeleSsi {
  id         Int         @id @default(autoincrement())
  nom        String
  Equipements Equipement[]
}

model Installation {
  id        Int      @id @default(autoincrement())
  dateInstallation DateTime
  dateMaintenance  DateTime?
  observations     String?
  idClient         Int
  idSysteme        Int
  idSite           Int?
  Client           Client     @relation(fields: [idClient], references: [id],onDelete: Cascade)
  Systeme          Systeme    @relation(fields: [idSysteme], references: [id], onDelete: Cascade)
  Site             Site?      @relation(fields: [idSite], references: [id], onDelete: Cascade)
  EquipementsInstallation InstallationEquipement[]
  DemandesIntervention DemandeIntervention[]
}

model InstallationEquipement {
  id              Int      @id @default(autoincrement())
  statut           String
  dateInstallation DateTime
  dateMaintenance  DateTime?
  idEquipement     Int
  idInstallation   Int
  quantite         Int      // Ajout du champ quantite
  Equipement       Equipement   @relation(fields: [idEquipement], references: [id], onDelete: Cascade)
  Installation     Installation @relation(fields: [idInstallation], references: [id], onDelete: Cascade)
  Garanties        Garantie[]
}

model Contrat {
  id                Int      @id @default(autoincrement())
  nom               String
  dateDebut         DateTime
  dateFin           DateTime
  periodicite       String
  typeContrat       String
  termeContrat      String
  idSite            Int
  Site              Site     @relation(fields: [idSite], references: [id], onDelete: Cascade)
  
}

model Garantie {
  id                Int      @id @default(autoincrement())
  dateDebutGarantie DateTime
  dateFinGarantie   DateTime
  idInstallationEq  Int
  InstallationEquipement InstallationEquipement @relation(fields: [idInstallationEq], references: [id])
}

model Maintenance {
  id               Int      @id @default(autoincrement())
  numero           String
  dateMaintenance  DateTime
  description      String
  statut           String
  typeMaintenance  String
  idSite   Int
  idTechnicien     Int
  idContact           Int
  Contact           Contact?     @relation(fields: [idContact], references: [id])
  Site     Site @relation(fields: [idSite], references: [id])
  Technicien       Utilisateur  @relation("TechnicienMaintenance", fields: [idTechnicien], references: [id])
  Actions          MaintenanceAction[]
}

model ActionMaintenance {
  id           Int      @id @default(autoincrement())
  libeleAction String
  idSysteme    Int
  Systeme      Systeme   @relation(fields: [idSysteme], references: [id])
  MaintenanceActions MaintenanceAction[]
}

model MaintenanceAction {
  id             Int      @id @default(autoincrement())
  statut         Boolean
  observation    String
  idMaintenance  Int
  idAction       Int
  Maintenance    Maintenance       @relation(fields: [idMaintenance], references: [id])
  Action         ActionMaintenance @relation(fields: [idAction], references: [id])
}

model DemandeIntervention {
  id               Int      @id @default(autoincrement())
  statut           String
  typePanneDeclare String
  dateDeclaration  DateTime
  idInstallation   Int
  idClient         Int
  idSite           Int
  idContact        Int
  Installation     Installation @relation(fields: [idInstallation], references: [id])
  Client           Client       @relation(fields: [idClient], references: [id])
  Site             Site         @relation(fields: [idSite], references: [id])
  Contact          Contact      @relation(fields: [idContact], references: [id])
  Interventions    Intervention[]
}

model Intervention {
  id                  Int      @id @default(autoincrement())
  diagnostics         String
  travauxRealises     String
  pieceFournies       String
  dateIntervention    DateTime
  dureeHeure          Int
  numero              Int
  ficheInt            String
  idTechnicien        Int
  idContact           Int
  idDemandeIntervention Int
  Technicien          Utilisateur @relation("TechnicienIntervention", fields: [idTechnicien], references: [id])
  Contact             Contact     @relation(fields: [idContact], references: [id])
  DemandeIntervention DemandeIntervention @relation(fields: [idDemandeIntervention], references: [id])

  @@map("intervention")
}
